call plug#begin()
  Plug 'preservim/NERDTree' "file system explorer https://github.com/preservim/nerdtree
  Plug 'preservim/nerdcommenter' "comment plugin https://github.com/preservim/nerdcommenter
  Plug 'arcticicestudio/nord-vim' "vim nord theme library https://github.com/arcticicestudio/nord-vim
  Plug 'vim-airline/vim-airline' "https://github.com/vim-airline/vim-airline
  Plug 'vim-airline/vim-airline-themes'
  Plug 'jiangmiao/auto-pairs' "Insert,delete brackets and quotes by pairs https://github.com/jiangmiao/auto-pairs 
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } "command line file fuzzy finder https://github.com/junegunn/fzf
  Plug 'junegunn/fzf.vim' "this is actual plugin, above is just a library https://github.com/junegunn/fzf.vim
  Plug 'mattn/emmet-vim' "abbreviation expander plugin https://github.com/mattn/emmet-vim
  Plug 'pechorin/any-jump.vim' "jump to defination or reference https://github.com/pechorin/any-jump.vim
  Plug 'ryanoasis/vim-devicons' "add set of icons to supported plugins https://github.com/ryanoasis/vim-devicons
  Plug 'flazz/vim-colorschemes' "colorscheme plugin https://github.com/flazz/vim-colorschemes
  Plug 'scrooloose/syntastic' "syntax checker https://github.com/vim-syntastic/syntastic
  Plug 'neoclide/coc.nvim', {'branch': 'release'} "language server host https://github.com/neoclide/coc.nvim
  Plug 'wincent/command-t' "fast file navigation for vim https://github.com/wincent/command-t
  Plug 'editorconfig/editorconfig-vim' "editor config plug in https://github.com/editorconfig/editorconfig-vim
  Plug 'SirVer/ultisnips' "ultisnips engine https://github.com/SirVer/ultisnips
  Plug 'honza/vim-snippets' "Snippets are separated from the engine , default key is TAB so need to change
  Plug 'ervandew/supertab' "super tab to navigate drop down with tab key https://github.com/ervandew/supertab
  Plug 'uzxmx/vim-widgets' "this is for coc-dependency
call plug#end()        
    
"common basic properties
let mapleader = " "
syntax on
syntax enable
filetype off     
filetype plugin indent on             

"mapping 
noremap <Leader>\t :botright terminal<CR>   #\\t for spawning terminal inside vim
nnoremap <leader>n :NERDTreeFocus<CR>       # ctrl + n for nerdtree ctrl + w w to navigave in windows 
nnoremap <C-n> :NERDTree<CR>                # ctrl + t toggle nerd tree , ctrl + f brings up finder 
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
nnoremap <F1> :CocCommand editor.action.organizeImport<CR>


"mapping 
nnoremap L $
nnoremap H ^
vnoremap L $
vnoremap H ^

" scrolling
nmap <leader>d <C-d>
nmap <leader>u <C-u>
vmap <leader>d <C-d>
vmap <leader>u <C-u>

" system clipboard
vmap <leader>yiw "+yiw
nmap <leader>yiw "+yiw
vmap <leader>y "+y
vmap <leader>d "_d
nmap <leader>y "+yy
nmap <leader>p "+p
nmap <leader>P "+P
vmap <leader>p "+p
vmap <leader>P "+P

set nocompatible              
set noswapfile
set modeline
set expandtab
set tabstop=4
set shiftwidth=4
set autoindent
set softtabstop=4
set expandtab
set fileformat=unix
set foldmethod=indent
set nofoldenable
set diffopt+=vertical
set showtabline=2
set laststatus=2
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set nu
set path+=**
set wildmenu
set wrap
set encoding=UTF-8
set relativenumber
"set guifont=Hack:h20
"set guifont=Hack-Regular:h20

let g:WebDevIconsOS = 'Darwin'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)
"  Cursor settings below
"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar

" Works with both enabled and disabled italic font option.
let g:nord_italic = 1
let g:SuperTabDefaultCompletionType = "<c-n>" "supertab dropdown navigation from top to bottom

colorscheme Atelier_HeathDark

"****************COC config and key mapping begin***************

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>sf  <Plug>(coc-format-selected)
nmap <leader>sf  <Plug>(coc-format-selected)
" Formatting current file
nnoremap  <leader>fc :Format <CR>
" organize imports
nnoremap  <leader>OI :OR<CR>

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

"java running mapping
autocmd filetype java nnoremap <leader>r :w <bar> !javac % && java -enableassertions %:r <CR>
autocmd filetype python nnoremap <leader>r :w <bar> !python3 % <CR>
"autocmd filetype python nnoremap <F5> :w <bar> !python % <CR>

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

"****************COC config and key mapping end***************

